{"version":3,"sources":["TabPanel.js","Base64ToBin.js","BinToBase64.js","Base64Panel.js","App.js","serviceWorker.js","index.js"],"names":["TabPanel","props","children","value","index","role","hidden","this","id","aria-labelledby","other","Box","p","React","Component","Base64ToBin","state","downloadLink","actionEnabled","update","bind","event","setState","input","target","decoded","atob","e","toast","error","link","toBin","window","URL","revokeObjectURL","data","blob","Blob","type","createObjectURL","raw","bytes","Uint8Array","length","i","charCodeAt","marginProps","style","marginBottom","marginTop","TextField","multiline","rows","rowsMax","fullWidth","size","placeholder","onChange","Button","color","variant","disabled","href","download","Typography","BinToBase64","output","outputTextId","copyToClipboard","files","info","file","reader","FileReader","onload","b64","btoa","String","fromCharCode","apply","result","name","readAsArrayBuffer","document","getElementById","select","execCommand","focus","dropzoneProps","bgcolor","fontWeight","borderWidth","borderStyle","textAlign","cursor","dropzoneBoxMarginProps","dropzoneTextProps","paddingBottom","paddingTop","onDrop","handleAccepted","getRootProps","getInputProps","InputProps","readOnly","onClick","Base64Panel","handleChange","newValue","AppBar","position","Tabs","Tab","label","App","className","autoClose","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.efd042ec.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nclass TabPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        const { children, value, index, ...other } = props;\n    }\n\n    render() {\n        return (\n            <div \n                role='tabpanel'\n                hidden={this.props.value !== this.props.index}\n                id={`panel-${this.props.index}`}\n                aria-labelledby={`tab-${this.props.index}`}\n                {...this.props.other}>\n                    {this.props.value === this.props.index && (\n                        <Box p={3}>\n                            {this.props.children}\n                        </Box>\n                    )}\n            </div>\n        );\n    }\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n}\n\nexport default TabPanel;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { toast } from 'react-toastify';\n\nclass Base64ToBin extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { downloadLink: '', actionEnabled: false };\n        this.update = this.update.bind(this);\n    }\n\n    update(event) {\n        this.setState({actionEnabled: false});\n        const input = event.target.value;\n        let decoded = '';\n        try {\n            decoded = atob(input);\n        } catch (e) {\n            toast.error('Invalid input.');\n            decoded = '';\n        }\n        if (decoded !== '') {\n            const link = this.downloadLink(this.toBin(decoded));\n            if (this.state.downloadLink !== '') {\n                window.URL.revokeObjectURL(this.state.downloadLink);\n            }\n            this.setState({downloadLink: link, actionEnabled: true});\n        }\n    }\n\n    downloadLink(data) {\n        const blob = new Blob(\n            [data], \n            {type: 'application/octet-stream'});\n        return window.URL.createObjectURL(blob);\n    }\n\n    toBin(raw) {\n        const bytes = new Uint8Array(raw.length);\n        for (let i = 0; i < raw.length; i++) {\n            bytes[i] = raw.charCodeAt(i);\n        }\n        return bytes;\n    }\n\n    render() {\n        const marginProps = {\n            style: {\n                marginBottom: '1rem',\n                marginTop: '2rem'\n            }\n        };\n        return (\n            <div>\n                <Box>\n                    <TextField\n                        multiline \n                        rows={4}\n                        rowsMax={4} \n                        fullWidth\n                        size='medium'\n                        placeholder='Paste some base 64 text here'\n                        onChange={this.update}/>\n                </Box>\n                <Box {...marginProps}>\n                    <Button \n                        color='primary' \n                        variant='contained' \n                        disabled={!this.state.actionEnabled}\n                        href={this.state.downloadLink}\n                        download='binary'>\n                        <Typography>Download</Typography>\n                    </Button>\n                </Box>\n            </div>\n        );\n    }\n\n}\n\nexport default Base64ToBin;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Dropzone from 'react-dropzone';\nimport { toast } from 'react-toastify';\n\nclass BinToBase64 extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            output: ''\n        };\n        this.outputTextId = 'outputTextId';\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n    }\n\n    handleAccepted(files) {\n        if (files.length === 0) {\n            toast.error('No file specified.');\n        } else if (files.length !== 1) {\n            toast.error('Cannot process multiple files.');\n        } else {\n            toast.info('Converting...');\n            const file = files[0];\n            const reader = new FileReader();\n            const callback = data => {\n                this.setState({output: data});\n                toast.info(`Converted ${file.name} to base64.`);\n            };\n            reader.onload = function() {\n                try {\n                    const b64 = btoa(String.fromCharCode.apply(\n                        null, \n                        new Uint8Array(this.result)));\n                    callback(b64);\n                } catch (e) {\n                    toast.error('Invalid input.');\n                }\n            }\n            reader.readAsArrayBuffer(file);\n        }\n    }\n\n    copyToClipboard(event) {\n        document.getElementById(this.outputTextId).select();\n        document.execCommand('copy');\n        event.target.focus();\n        toast.info('Copied base64 text to clipboard.');\n    }\n\n    render() {\n        const dropzoneProps = {\n            bgcolor: 'background.default',\n            color: 'primary.light',\n            style: {\n                fontWeight: 'bold', \n                borderWidth: '2px', \n                borderStyle: 'dashed',\n                textAlign: 'center',\n                cursor: 'pointer',\n                marginBottom: '1rem'},\n          };\n          const marginProps = {\n              style: {\n                  marginBottom: '1rem',\n                  marginTop: '2rem'\n                }\n          };\n          const dropzoneBoxMarginProps = {\n              style: {\n                  marginBottom: '1rem',\n                  marginTop: '1rem'\n              }\n          }\n          const dropzoneTextProps = {\n              style: {\n                  paddingBottom: '1rem',\n                  paddingTop: '1rem'\n                }\n            };\n        return (\n            <div>\n                <Box {...dropzoneBoxMarginProps}>\n                    <Dropzone onDrop={files => this.handleAccepted(files)}>\n                        {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <Box {...dropzoneProps}>\n                                    <p {...dropzoneTextProps}>\n                                        Drop a file here or click to select.\n                                    </p>\n                                </Box>\n                            </div>\n                        </section>\n                        )}\n                    </Dropzone>\n                </Box>\n                <Box {...marginProps}>\n                    <TextField\n                        id={this.outputTextId}\n                        multiline \n                        rows={4}\n                        rowsMax={4} \n                        fullWidth\n                        size='medium'\n                        placeholder='Output'\n                        value={this.state.output}\n                        InputProps={{readOnly:true}}/>\n                </Box>\n                <Box {...marginProps}>\n                    <Button \n                        color='primary' \n                        variant='contained'\n                        disabled={this.state.output === ''} \n                        onClick={this.copyToClipboard}>\n                            <Typography>Copy</Typography>\n                    </Button>\n                </Box>\n            </div>\n        );\n    }\n\n}\n\nexport default BinToBase64;","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { Tabs, Tab } from '@material-ui/core';\nimport TabPanel from './TabPanel.js';\nimport AppBar from '@material-ui/core/AppBar';\nimport Base64ToBin from './Base64ToBin';\nimport BinToBase64 from './BinToBase64';\n\nclass Base64Panel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {value: 0};\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event, newValue) {\n        this.setState({value: newValue});\n    }\n\n    render() {\n        return (\n            <>\n                <AppBar position='static'>\n                    <Tabs value={this.state.value} onChange={this.handleChange}>\n                        <Tab label='bin to b64'></Tab>\n                        <Tab label='b64 to bin'></Tab>\n                    </Tabs>\n                </AppBar>\n                <TabPanel value={this.state.value} index={0}>\n                    <BinToBase64/>\n                </TabPanel>\n                <TabPanel value={this.state.value} index={1}>\n                    <Base64ToBin/>\n                </TabPanel>\n            </>\n        );\n    }\n\n}\n\nexport default Base64Panel;","import React from 'react';\nimport Base64Panel from './Base64Panel';\nimport 'typeface-roboto';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Base64Panel/>\n      <ToastContainer autoClose={2500}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}