{"version":3,"sources":["SnakeToCamelForm.js","App.js","serviceWorker.js","index.js"],"names":["SnakeToCamelForm","props","textarea","state","snake","camel","capitalizeFirst","snakeToCamelHandler","bind","capitalizeFirstHandler","snakeToCamel","copyCamelToClipboard","event","this","camelTextArea","controlEl","select","document","execCommand","target","focus","toast","info","input","value","setState","result","checked","str","capFirst","toLowerCase","replace","group","toUpperCase","charAt","substring","fluid","md","label","rows","placeholder","onChange","ref","readOnly","sm","xs","color","disabled","length","onClick","React","Component","App","className","autoClose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3acd130.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'muicss/lib/react/container';\nimport Textarea from 'muicss/lib/react/textarea';\nimport Checkbox from 'muicss/lib/react/checkbox';\nimport Button from 'muicss/lib/react/button';\nimport Row from 'muicss/lib/react/row';\nimport Col from 'muicss/lib/react/col';\nimport 'muicss/lib/sass/mui.scss';\nimport { toast } from 'react-toastify';\n\nclass SnakeToCamelForm extends React.Component {\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.textarea = null;\n\t\tthis.state = {\n\t\t\tsnake: '',\n\t\t\tcamel: '',\n\t\t\tcapitalizeFirst: false\n\t\t};\n\t\tthis.snakeToCamelHandler = this.snakeToCamelHandler.bind(this);\n\t\tthis.capitalizeFirstHandler = this.capitalizeFirstHandler.bind(this);\n\t\tthis.snakeToCamel = this.snakeToCamel.bind(this);\n\t\tthis.copyCamelToClipboard = this.copyCamelToClipboard.bind(this);\n\t}\n\n\tcopyCamelToClipboard(event) {\n\t\tthis.camelTextArea.controlEl.select();\n\t\tdocument.execCommand('copy');\n\t\tevent.target.focus();\n\t\ttoast.info(\"Copied camelCase text to clipboard.\");\n\t}\n\n\tsnakeToCamelHandler(event) {\n\t\tconst input = event.target.value;\n\t\tthis.setState({ snake: input });\n\t\tconst result = this.snakeToCamel(input, this.state.capitalizeFirst);\n\t\tthis.setState({ camel: result });\n\t}\n\n\tcapitalizeFirstHandler(event) {\n\t\tconst checked = event.target.checked;\n\t\tconst result = this.snakeToCamel(this.state.snake, checked);\n\t\tthis.setState({\n\t\t\tcapitalizeFirst: checked,\n\t\t\tcamel: result\n\t\t});\n\t}\n\n\tsnakeToCamel(str, capFirst) {\n\t\tvar result = str.toLowerCase().replace(\n    \t\t/([-_][a-z0-9])/g,\n    \t\t(group) => group.toUpperCase()\n                    .replace('-', '')\n                    .replace('_', '')\n\t\t);\n\t\tif (capFirst) {\n\t\t\tresult = result.replace(\n\t\t\t\t/([\\s][a-z0-9])/g,\n\t\t\t\t(group) => group.toUpperCase()\n\t\t\t);\n\t\t\tresult = result.charAt(0).toUpperCase() + result.substring(1);\n\t\t}\n\t\treturn result;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Container fluid={true}>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md=\"12\">\n\t\t\t\t\t\t<h1>Snake Case to Camel Case</h1>\n\t\t\t\t\t\t<p>Convert a list of <code>SNAKE_CASE</code> or <code>KEBAB-CASE</code> terms to their <code>camelCase</code> equivalents. Clicking \"capitalize first\"  will capitalize the first letter of every <code>camelCase</code> term (also known as <code>PascalCase</code>). The input can be mixed. For example <code>TERM-ONE term_two Term-Three</code> will be converted to <code>termOne termTwo termThree</code>.</p>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md=\"12\">\n\t\t\t\t\t\t<Textarea label=\"Input\" rows=\"4\" value={this.state.snake} placeholder=\"TRY_ME\" onChange={this.snakeToCamelHandler}/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md=\"12\">\n\t\t\t\t\t\t<Textarea label=\"Output\" rows=\"4\" value={this.state.camel} placeholder=\"tryMe\" ref={(textarea) => this.camelTextArea = textarea} readOnly/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md=\"2\" sm=\"4\" xs=\"6\">\n\t\t\t\t\t\t<Checkbox value={this.state.capitalizeFirst} label=\"Capitalize first\" onChange={this.capitalizeFirstHandler}/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col md=\"2\" sm=\"4\" xs=\"6\">\n\t\t\t\t\t\t<Button color=\"primary\" disabled={this.state.camel.length === 0} onClick={this.copyCamelToClipboard}>Copy</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n}\n\nexport default SnakeToCamelForm;\n","import React from 'react';\nimport SnakeToCamelForm from './SnakeToCamelForm';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnakeToCamelForm/>\n      <ToastContainer autoClose={2500}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}