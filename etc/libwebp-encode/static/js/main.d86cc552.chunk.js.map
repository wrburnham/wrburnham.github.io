{"version":3,"sources":["WebPConvertForm.js","App.js","serviceWorker.js","index.js"],"names":["WebPConvertForm","props","defaultQuality","state","inputImage","quality","processing","convertLabel","handleConvert","bind","handleQualityChange","files","length","toast","error","file","this","setState","info","name","resetState","url","URL","createObjectURL","img","Image","onload","revokeObjectURL","width","height","convertError","target","convertedImg","undefined","src","trim","canvas","context","getContext","drawImage","image","getImageData","encode","converted","convertedUrl","Blob","type","message","err","warn","onerror","event","value","success","window","WebP","then","Module","api","version","cwrap","create_buffer","destroy_buffer","get_result_pointer","get_result_size","free_result","p","HEAP8","set","data","resultPointer","resultSize","resultView","Uint8Array","buffer","dropzoneProps","bgcolor","color","style","fontWeight","borderWidth","borderStyle","textAlign","cursor","marginBottom","marginProps","marginTop","dropzoneTextProps","paddingBottom","paddingTop","Container","Box","onDrop","handleAccepted","getRootProps","getInputProps","Typography","id","gutterBottom","Slider","onChange","getAriaValueText","valuetext","aria-labelledby","step","min","max","valueLabelDisplay","Button","variant","disabled","onClick","ref","className","alt","React","Component","App","autoClose","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d86cc552.chunk.js","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport Container from '@material-ui/core/Container';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport './WebPConvertForm.css';\n\nimport { toast } from 'react-toastify';\n\nclass WebPConvertForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultQuality = 80;\n    this.state = {\n      inputImage: null,\n      quality: this.defaultQuality,\n      processing: false\n    };\n    this.convertLabel = 'Convert';\n    this.handleConvert = this.handleConvert.bind(this);\n    this.handleQualityChange = this.handleQualityChange.bind(this);\n  }\n\n  handleAccepted(files) {\n  \tif (files.length === 0) {\n      toast.error('No file specified.');\n  \t} else if (files.length !== 1) {\n      toast.error('Cannot process multiple files.');\n  \t} else {\n      const file = files[0];\n      // todo validate file : is it a valid image?\n      this.setState({inputImage: file});\n      toast.info('File ' + file.name + ' was successfully read. Click \"' + this.convertLabel + '\" to get a WebP image.');\n  \t}\n  }\n\n  convertError() {\n  \ttoast.error('An error occurred and the image could not be converted.');\n  \tthis.resetState();\n  }\n\n  resetState() {\n  \tthis.setState({\n  \t  inputImage: null,\n  \t  quality: this.defaultQuality,\n  \t  processing: false});\n  }\n\n  handleConvert() {\n  \tthis.setState({processing: true});\n  \tconst url = URL.createObjectURL(this.state.inputImage);\n  \tconst img = new Image();\n  \ttry {\n  \t  img.onload = () => {\n  \t    URL.revokeObjectURL(url);\n  \t  \tif (img.width + img.height === 0) {\n  \t  \t  this.convertError();\n  \t  \t} else {\n  \t  \t  const target = this.convertedImg;\n  \t  \t  const revoke = target.src === undefined || target.src === null || target.src.trim() === '';\n  \t  \t  if (!revoke) {\n  \t  \t  \tURL.revokeObjectURL(target.src);\n  \t  \t  }\n  \t  \t  try {\n            this.canvas.width = img.width;\n            this.canvas.height = img.height;\n            const context = this.canvas.getContext('2d');\n            context.drawImage(img, 0, 0);\n            const image = context.getImageData(0, 0, img.width, img.height);\n            this.encode(\n            image, \n            this.state.quality, \n      \t    converted => {\n      \t      try {\n      \t        const convertedUrl = URL.createObjectURL(new Blob([converted], {type: 'image/webp'}));\n                target.src = convertedUrl;\n                const message = 'Converted ' + this.state.inputImage.name + ' with ' + this.state.quality + '% quality.';\n                toast.info(message);\n                this.resetState();\n              } catch (err) {\n              \ttoast.warn('The converted image may not have been rendered correctly.');\n              \tthis.resetState();\n              }\n      \t    });\n          } catch (err) {\n          \tthis.convertError();\n          }\n  \t  \t}\n      };\n      img.onerror = () => {\n        this.convertError();\n      };\n  \t  img.src = url;\n  \t} catch (err) {\n  \t  this.convertError();\n    }\n  }\n\n  handleQualityChange(event, value) {\n    this.setState({quality: value});\n  }\n\n  encode(image, quality, success) {\n  \twindow.WebP().then(function(Module) {\n      const api = {\n        version: Module.cwrap('version', 'number', []),\n        create_buffer: Module.cwrap('create_buffer', 'number', ['number', 'number']),\n        destroy_buffer: Module.cwrap('destroy_buffer', '', ['number']),\n        encode: Module.cwrap('encode', '', ['number', 'number', 'number', 'number']),\n        get_result_pointer: Module.cwrap('get_result_pointer', 'number', ''),\n        get_result_size: Module.cwrap('get_result_size', 'number', ''),\n        free_result: Module.cwrap('free_result', '', ['number']),\n      };\n\n      const p = api.create_buffer(image.width, image.height);\n      \n      Module.HEAP8.set(image.data, p);\n      \n      api.encode(p, image.width, image.height, quality);\n      \n      const resultPointer = api.get_result_pointer();\n      const resultSize = api.get_result_size();\n      const resultView = new Uint8Array(Module.HEAP8.buffer, resultPointer, resultSize);\n      const converted = new Uint8Array(resultView);\n      \n      api.free_result(resultPointer);\n      api.destroy_buffer(p);\n\n      success(converted);\n\t});\n  }\n\n  valuetext(value) {\n    return `${value}%`;\n  }\n\n  render() {\n  \tconst dropzoneProps = {\n  \t  bgcolor: 'background.default',\n  \t  color: 'primary.light',\n  \t  style: {\n  \t    fontWeight: 'bold', \n  \t    borderWidth: '2px', \n  \t    borderStyle: 'dashed',\n  \t    textAlign: 'center',\n  \t    cursor: 'pointer',\n  \t    marginBottom: '1rem'},\n  \t};\n  \tconst marginProps = {\n      style: {\n      \tmarginBottom: '1rem',\n      \tmarginTop: '2rem'\n      }\n  \t};\n  \tconst dropzoneTextProps = {\n      style: {\n      \tpaddingBottom: '1rem',\n      \tpaddingTop: '1rem'\n      }\n  \t};\n    return (\n      <Container>\n        <h1>WebP Encoder</h1>\n        <p>Convert an image to Google's WebP format in your web browser. No server side processing is done (all data stays on the client). The converted webp image will be shown in the browser window.</p>\n        <Box {...marginProps}>\n          <Dropzone onDrop={files => this.handleAccepted(files)}>\n            {({getRootProps, getInputProps}) => (\n              <section>\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <Box {...dropzoneProps}>\n                    <p {...dropzoneTextProps}>Drop an image here or click to select.</p>\n                  </Box>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n        </Box>\n        <Box {...marginProps}>\n          <Typography id='webp-encode-quality' gutterBottom>\n            Quality (%)\n          </Typography>\n          <Slider\n            onChange={this.handleQualityChange}\n            value={this.state.quality}\n            getAriaValueText={this.valuetext}\n            aria-labelledby='webp-encode-quality'\n            step={1}\n            min={0}\n            max={100}\n            valueLabelDisplay='auto'\n          />\n        </Box>\n        <Box {...marginProps}>\n          <Button color='primary' variant='contained' disabled={this.state.inputImage===null || this.state.processing === true} onClick={this.handleConvert}>\n            <p>{this.convertLabel}</p>\n          </Button>\n        </Box>\n        <Box {...marginProps}>\n          <img ref={(img) => this.convertedImg = img} className='preview' alt=''/>\n        </Box>\n        <canvas ref={(canvas) => this.canvas = canvas} className='hidden'/>\n      </Container>\n    );\n  }\n}\n\nexport default WebPConvertForm;","import React from 'react';\nimport WebPConvertForm from './WebPConvertForm';\nimport 'typeface-roboto';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\n// ciao\nfunction App() {\n/*\n  loadImage('test/resources/grapes1.jpg')\n    .then(image => encode(image, 100, function(result) {\n      canvasConverted.src = URL.createObjectURL(new Blob([result], {type: \"image/webp\"}));\n*/\n/*\nasync function loadImage(src) {\n  // Load image\n  const imgBlob = await fetch(src).then(resp => resp.blob());\n  const img = await createImageBitmap(imgBlob);\n  // Make canvas same size as image\n  const canvas = this.refs.canvasOriginal;\n  canvas.width = img.width;\n  canvas.height = img.height;\n  // Draw image onto canvas\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(img, 0, 0);\n  return ctx.getImageData(0, 0, img.width, img.height);\n}\n*/\n\n\n  return (\n    <div className=\"App\">\n      <WebPConvertForm/>\n      <ToastContainer autoClose={2500}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}